# Архитектура LLM Agent приложения

## Обзор проекта
Приложение для работы с различными LLM с поддержкой MCP протокола, состоящее из бэкенда на TypeScript/Express и фронтенда на Angular.

## Структура проекта
```
llm-agent/
├── backend/                 # Бэкенд приложения
│   ├── src/
│   │   ├── controllers/     # REST контроллеры
│   │   ├── services/        # Бизнес-логика
│   │   ├── models/          # Типы и интерфейсы
│   │   ├── providers/       # LLM провайдеры
│   │   ├── mcp/            # MCP клиент и менеджер
│   │   ├── storage/        # Управление файлами
│   │   └── utils/          # Утилиты
│   ├── data/               # JSON файлы для хранения
│   └── uploads/            # Загруженные изображения
├── frontend/               # Фронтенд приложения (Angular)
│   ├── src/
│   │   ├── app/
│   │   │   ├── components/  # Переиспользуемые компоненты
│   │   │   ├── pages/       # Страницы приложения
│   │   │   ├── services/    # Angular сервисы
│   │   │   ├── models/      # TypeScript интерфейсы
│   │   │   └── shared/      # Общие модули
│   │   └── assets/         # Статические ресурсы
└── архитектура.txt         # Документация архитектуры
```

## Бэкенд архитектура

### Основные компоненты:

1. **LLM Провайдеры:**
   - `LLMProvider` (абстрактный класс) - базовый интерфейс для всех провайдеров
   - `OpenAIProvider` - для OpenAI совместимых API
   - `OllamaProvider` - для Ollama REST API
   - Поддержка потокового ответа и изображений

2. **MCP (Model Context Protocol):**
   - `MCPClient` - клиент для подключения к MCP серверам
   - `MCPManager` - управление MCP серверами и их состоянием
   - Поддержка конфигов в формате mcp-config.json

3. **Сервисы:**
   - `AgentService` - управление агентами (LLM + системный промт + MCP)
   - `ChatService` - управление чатами и сообщениями
   - `StorageService` - работа с JSON файлами для персистентности
   - `FileUploadService` - загрузка и обработка изображений

4. **Модели данных:**
   - `Chat` - информация о чатах
   - `Agent` - конфигурация агентов
   - `LLMConfig` - настройки LLM моделей
   - `MCPServer` - конфигурация MCP серверов
   - `Message` - сообщения в чатах

### REST API endpoints:

- `/api/chats` - управление чатами
- `/api/agents` - управление агентами
- `/api/llm` - управление LLM моделями
- `/api/mcp` - управление MCP серверами
- `/api/upload` - загрузка файлов
- `/api/stream` - потоковый ответ от LLM

## Фронтенд архитектура

### Структура страниц:
1. **Layout** - основной макет с сайдбаром
2. **Chat** - страница чата с сообщениями
3. **Chats List** - список всех чатов
4. **Settings** - настройки (LLM, MCP, Агенты)

### Компоненты:
- `SidebarComponent` - боковое меню навигации
- `ChatComponent` - интерфейс чата
- `MessageComponent` - отдельное сообщение
- `ModalComponent` - модальные окна для настроек
- `AgentSelectorComponent` - выбор агента

### Сервисы:
- `ApiService` - HTTP клиент для взаимодействия с бэкендом
- `ChatService` - управление состоянием чатов
- `WebSocketService` - потоковый ответ от LLM
- `SettingsService` - управление настройками

## Технологический стек

### Бэкенд:
- TypeScript
- Node.js + Express
- Socket.io для WebSocket
- Multer для загрузки файлов
- OpenAI SDK
- Axios для HTTP запросов

### Фронтенд:
- Angular 18+
- Angular Material UI
- RxJS для реактивного программирования
- Socket.io-client

## Хранение данных
Все данные хранятся в JSON файлах в папке `backend/data/`:
- `chats.json` - чаты и сообщения
- `agents.json` - конфигурация агентов
- `llm-models.json` - настройки LLM моделей
- `mcp-servers.json` - конфигурация MCP серверов

## Ключевые особенности
1. **Модульность** - четкое разделение ответственности между компонентами
2. **Расширяемость** - легко добавлять новые LLM провайдеры и MCP серверы
3. **Потоковость** - поддержка streaming ответов от LLM
4. **Персистентность** - сохранение всех данных в JSON файлах
5. **Реактивность** - использование WebSocket для real-time обновлений

## Планы развития
1. Добавление поддержки новых LLM провайдеров
2. Расширение функциональности MCP
3. Улучшение UI/UX
4. Добавление системы плагинов
5. Миграция на базу данных при необходимости
