const io = require('socket.io-client');

console.log('Connecting to WebSocket...');

const socket = io('http://localhost:3000', {
  transports: ['websocket', 'polling']
});

socket.on('connect', () => {
  console.log('‚úÖ WebSocket connected:', socket.id);
  
  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ–º—Å—è –∫ —á–∞—Ç—É
  const chatId = '81d274a4-d878-4228-b45d-e69d67dc7174';
  socket.emit('join-chat', chatId);
  console.log('üì• Joined chat:', chatId);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 1 —Å–µ–∫—É–Ω–¥—É
  setTimeout(() => {
    console.log('üì§ Sending test message...');
    socket.emit('send-message', {
      chatId: chatId,
      content: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ Node.js',
      images: []
    });
  }, 1000);
});

socket.on('disconnect', (reason) => {
  console.log('‚ùå WebSocket disconnected:', reason);
});

socket.on('connect_error', (error) => {
  console.error('‚ùå Connection error:', error);
});

socket.on('stream-response', (data) => {
  console.log('üì® Stream response:', data);
});

socket.on('generation-start', (data) => {
  console.log('üöÄ Generation started:', data);
});

socket.on('generation-complete', (data) => {
  console.log('‚úÖ Generation completed:', data);
  process.exit(0);
});

socket.on('generation-error', (data) => {
  console.error('‚ùå Generation error:', data);
  process.exit(1);
});

// –ó–∞–≤–µ—Ä—à–∞–µ–º —á–µ—Ä–µ–∑ 30 —Å–µ–∫—É–Ω–¥
setTimeout(() => {
  console.log('‚è∞ Test timeout');
  process.exit(0);
}, 30000);
